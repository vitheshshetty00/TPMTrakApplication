@page
@model TPMTrakApplication.Pages.ProduceModel
@{
    ViewData["Title"] = "Message Producer";
}

<div class="producer-container">
    <h3>Message Producer</h3>

    <div class="control-panel">
        <div id="statusDisplay" class="status @(Model.IsRunning ? "running" : "stopped")">
            Status: @(Model.IsRunning ? "Running" : "Stopped")
        </div>
        <form method="post" class="d-inline">
            <button type="submit" id="controlButton" class="control-button @(Model.IsRunning ? "stop" : "start")"
                    asp-page-handler="@(Model.IsRunning ? "Stop" : "Start")">
                @(Model.IsRunning ? "Stop Producer" : "Start Producer")
            </button>
        </form>
    </div>

    <div class="stats-panel">
        <div>Messages Sent: <span id="messageCount">0</span></div>
    </div>

    <div class="messages-container">
        <h4>Recent Messages</h4>
        <div id="messageList" class="message-list">
        </div>
    </div>
</div>

<script>
    let isRunning = @Json.Serialize(Model.IsRunning);
    let messageCount = 0;
    
    async function updateMessages() {
        if (!isRunning) return;
        
        try {
            const response = await fetch('/Produce?handler=Status');
            const data = await response.json();
            
            if (data.latestMessage) {
                messageCount++;
                document.getElementById('messageCount').textContent = messageCount;
                
                const messageList = document.getElementById('messageList');
                const div = document.createElement('div');
                div.className = 'message-item';
                div.innerHTML = `<span class="content">${data.latestMessage}</span>`;
                messageList.insertBefore(div, messageList.firstChild);
                
                if (messageList.children.length > 100) {
                    messageList.lastElementChild.remove();
                }
            }

            isRunning = data.isRunning;
            updateStatus();
        } catch (error) {
            console.error('Error fetching updates:', error);
        }
        
        setTimeout(updateMessages, 1000);
    }

    function updateStatus() {
        const statusDisplay = document.getElementById('statusDisplay');
        const controlButton = document.getElementById('controlButton');
        
        statusDisplay.className = `status ${isRunning ? "running" : "stopped"}`;
        statusDisplay.textContent = `Status: ${isRunning ? "Running" : "Stopped"}`;
        
        controlButton.className = `control-button ${isRunning ? "stop" : "start"}`;
        controlButton.textContent = isRunning ? "Stop Producer" : "Start Producer";
    }

    document.addEventListener('DOMContentLoaded', updateMessages);
</script>


<style>
    .producer-container {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
    }

    .control-panel {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    .status {
        padding: 8px 16px;
        border-radius: 4px;
        font-weight: bold;
    }

    .status.running {
        background-color: #d1fae5;
        color: #065f46;
    }

    .status.stopped {
        background-color: #fee2e2;
        color: #991b1b;
    }

    .control-button {
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        font-weight: bold;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .control-button.start {
        background-color: #10b981;
        color: white;
    }

    .control-button.stop {
        background-color: #ef4444;
        color: white;
    }

    .stats-panel {
        display: flex;
        gap: 20px;
        margin-bottom: 20px;
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 8px;
        font-size: 0.9rem;
    }

    .messages-container {
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        padding: 20px;
    }

    .message-list {
        max-height: 400px;
        overflow-y: auto;
    }

    .message-item {
        padding: 10px;
        margin-bottom: 10px;
        font-family: 'Courier New', Courier, monospace;
        font-size: 0.9rem;
    }

    .content {
        word-break: break-all;
    }
</style>